option java_package = "org.corfudb.format";

enum DataType {
    DATA = 0;
    EMPTY = 1;
    HOLE = 2;
    TRIMMED = 3;
    PROPOSAL = 4;
}

enum CheckpointEntryType {
    START = 0;
    CONTINUATION = 1;
    END = 2;
}

message DataRank {
    required int64 rank = 1;
    required int64 uuid_most_significant = 2;
    required int64 uuid_least_significant = 3;
}

message LogEntry {
    optional DataType data_type = 1;
    optional bytes data = 2;
    optional int64 global_address = 3;
    repeated string	streams = 6;
    map<string, int64> logical_addresses = 7;
    map<string, int64> backpointers = 8;
    optional DataRank rank = 9;
    optional CheckpointEntryType checkpointEntryType = 10;
    optional int64 checkpointId_most_significant = 11;
    optional int64 checkpointId_least_significant = 12;
    optional int64 checkpointedStreamId_most_significant = 13;
    optional int64 checkpointedStreamId_least_significant = 14;
    //  Tail of the stream at the time of taking the checkpoint snapshot.
    optional int64 checkpointedStreamStartLogAddress = 15;

    // ClientId is the Corfu runtime id that created this LogEntry
    optional int64 clientId_least_significant = 16;
    optional int64 clientId_most_significant = 17;
    // ThreadId is the thread id that created this LogEntry
    optional int64 threadId = 18;
}

message LogHeader {
    optional int32 version = 1;
    optional bool verify_checksum = 2;
}

message Metadata {
    required sfixed32 payload_checksum = 1;
    required sfixed32 length_checksum = 2;
    required sfixed32 length = 3;
}

message TrimEntry {
    optional int32 checksum = 1;
    optional int64 address = 2;
}

//  NodeView is a node's view of the cluster.
//  This is sent in response to a heartbeat request by a
//  Management Server.
//  It stores its own endpoint and server metrics and also
//  the network condition of all its peers.
message NodeView {
    // Current node's Endpoint
    optional string endpoint = 1;
    // Current node's Server Metrics
    optional ServerMetrics serverMetrics = 2;
    // Node's view of peer's connectivity health
    map<string, NetworkMetrics> networkMetricsMap = 3;
}

//  NetworkMetrics contains the network metrics of a node:
//  whether the last heartbeat was responded or not,
//  heartbeat response time and polling success rate.
message NetworkMetrics {
    //  Whether a response was received for the last heartbeat request.
    optional bool lastHeartbeatStatus = 1;
}

//  ServerMetrics is composed of the various metrics of a node
//  like the status of the different components, pending
//  requests in the log unit and tokens generated by the
//  sequencer on the node.
message ServerMetrics {

    //  Node endpoint (ip:port)
    optional string endpoint = 1;

    optional SequencerMetrics sequencerMetrics = 2;
}

// Sequencer Metrics
message SequencerMetrics {

    // Ready state of a sequencer to determine its READY/NOT_READY state.
    optional bool sequencerReady = 1;
}
